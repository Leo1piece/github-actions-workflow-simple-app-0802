name: Build and Deploy to Azure Env

env:
  AZURE_CONTAINER_REGISTRY: 'raydemo0802.azurecr.io'

run-name: ${{ github.actor }} is testing out GitHub Actions 🚀
on:
  push:
    branches: ['master']
  workflow_dispatch:
#手动trigger 
permissions:
  contents: read
  
jobs:
  buildImage:
    runs-on: ubuntu-latest
    steps:
         #新建docker 环境 搜索 build and push docker images 获得
         #https://github.com/marketplace/actions/build-and-push-docker-images
      - name: Check out repository code
        uses: actions/checkout@v3
 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Azure Container Registry Login
        uses: Azure/docker-login@v1
        with:
          # Container registry username
          username: 'acrgithubaction'
          # Container registry password
          password: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
          # Container registry server url
          login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
    # login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          # tags: <registry server url>/<app name>:<git commit sha>
          tags: acrgithubaction.azurecr.io/hello-world-app:${{ github.sha }}
          file: ./Dockerfile
      
  deployToAKS:
    permissions:
      actions: read
      contents: read
      id-token: write
  
    runs-on: ubuntu-latest
    needs: [buildImage]
    environment: Production
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        
      # Logs in with your Azure credentials
      #openid login 是最简单的方法
      #要先建一个 app registion ，服务有自己服务的账号，
      #Azure 登录操作负责与 Azure 的身份验证服务器交互，并使用 OpenID Connect 协议获取访问令牌和 ID 令牌。
      #这样，您可以在应用程序中使用这些令牌，而无需手动处理复杂的身份验证和授权逻辑。
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: '2d4632f6-8cec-42a8-b13c-3066279cfbf7'
          tenant-id: 'c7aec8f6-7e9d-4aee-9154-095223956b9d'
          subscription-id: '87d5a4eb-0982-494e-9aeb-481e3bddcdbb'
        #上面的id 都是从 app registration来得到的
        
      - name: Setup kubelogin
        uses: Azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'
#search  azure  kubelogin 
#读取aks的context信息。
      - name: Azure Kubernetes set context
        uses: Azure/aks-set-context@v3
        with:
          # Resource Group Name
          resource-group: 'rg-githubaction'
          # AKS Cluster Name
          cluster-name: 'aks-githubaction'
          # AKS Cluster Subscription
          subscription: '52ddba82-9f78-4f67-bc45-94f9aa09bfb4'
          # Get cluster admin credentials. Values: true or false
          admin: 'false'
          # Enables kubelogin for non-admin user scenario. Values: true or false
          use-kubelogin: 'true'
          
      # Substitute environment variables in a file
      - name: envsubst-action
        uses: danielr1996/envsubst-action@1.1.0
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          CONTAINER_NAME: hello-world-app:${{ github.sha }}
          AZURE_CONTAINER_REGISTRY: acrgithubaction.azurecr.io
        with:
          # File to run substitutions on
          input: 
            kubernetes/hello-world-deployment.yaml
          # File to write result to
          output: 
            hello-world-deployment.yaml

      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: |
            hello-world-deployment.yaml
            kubernetes/hello-world-service.yaml
          images: |
            acrgithubaction.azurecr.io/hello-world-app:${{ github.sha }}
